times = 1,
p = 0.5,
list = FALSE)
train_set <- dat %>% slice(-test_index)
test_set <- dat %>% slice(test_index)
View(dat)
fit <- lm(y ~ x_1, data = train_set)
y_hat <- predict(fit, newdata = test_set)
sqrt(mean((y_hat - test_set$y) ^ 2))
sqrt(sd((y_hat - test_set$y)^ 2))
fit <- lm(y ~ x_2, data = train_set)
y_hat <- predict(fit, newdata = test_set)
sqrt(mean((y_hat - test_set$y) ^ 2))
sqrt(sd((y_hat - test_set$y)^ 2))
source('~/DS-rep/LinearRegression_Excersic.R', echo=TRUE)
source('~/DS-rep/LinearRegression_Excersic.R', echo=TRUE)
source('~/DS-rep/LinearRegression_Excersic.R', echo=TRUE)
source('~/DS-rep/LinearRegression_Excersic.R', echo=TRUE)
source('~/DS-rep/LinearRegression_Excersic.R', echo=TRUE)
source('~/DS-rep/LinearRegression_Excersic.R', echo=TRUE)
source('~/DS-rep/LinearRegression_Excersic.R', echo=TRUE)
source('~/DS-rep/LinearRegression_Excersic.R', echo=TRUE)
source('~/DS-rep/CseStudy2.R', echo=TRUE)
source('~/DS-rep/CseStudy2.R', echo=TRUE)
source('~/DS-rep/CseStudy2.R', echo=TRUE)
mnist_27$train %>% ggplot(aes(x_1, x_2, color = y)) + geom_point()
View(mnist_27)
View(mnist_27[["train"]])
mnist_27$train %>% ggplot(aes(x_1, x_2, color = y)) + geom_point()
set.seed(2)
make_data <- function(n = 1000, p = 0.5,
mu_0 = 0, mu_1 = 2,
sigma_0 = 1,  sigma_1 = 1){
y <- rbinom(n, 1, p)
f_0 <- rnorm(n, mu_0, sigma_0)
f_1 <- rnorm(n, mu_1, sigma_1)
x <- ifelse(y == 1, f_1, f_0)
test_index <- createDataPartition(y, times = 1, p = 0.5, list = FALSE)
list(train = data.frame(x = x, y = as.factor(y)) %>% slice(-test_index),
test = data.frame(x = x, y = as.factor(y)) %>% slice(test_index))
}
dat <- make_data()
dat$train %>% ggplot(aes(x, color = y)) + geom_density()
source('~/DS-rep/CseStudy2.R', echo=TRUE)
install.packages("e1071")
source('~/DS-rep/CseStudy2.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
dat$train %>% ggplot(aes(x, color = y)) + geom_density()
View(dat)
View(dat[["train"]])
mu_1 <- seq(0, 3, len=25)
dat <- make_data(2)
y <- rbinom(n, 1, p)
source('~/.active-rstudio-document', echo=TRUE)
set.seed(2)
make_data <- function(n = 1000, p = 0.5,
mu_0 = 0, mu_1,
sigma_0 = 1,  sigma_1 = 1){
y <- rbinom(n, 1, p)
f_0 <- rnorm(n, mu_0, sigma_0)
f_1 <- rnorm(n, mu_1, sigma_1)
x <- ifelse(y == 1, f_1, f_0)
test_index <- createDataPartition(y, times = 1, p = 0.5, list = FALSE)
list(train = data.frame(x = x, y = as.factor(y)) %>% slice(-test_index),
test = data.frame(x = x, y = as.factor(y)) %>% slice(test_index))
}
dat <- make_data(2)
dat <- make_data(mu_1=2)
dat$train %>% ggplot(aes(x, color = y)) + geom_density()
sapply(mu_1,make_data)
mu_1 <- seq(0, 3, len=25)
for (i in mu_1){
dat <- make_data(mu_1=i)
}
mu_1 <- seq(0, 3, len=25)
for (i in mu_1){
v[i] <- make_data(mu_1=i)
}
v[1]<-1
mu_1 <- seq(0, 3, len=25)
for (i in mu_1){
v[i] <- make_data(mu_1=i)
}
library(dslabs)
library(tidyverse)
library(caret)
data("polls_2008")
qplot(q,margin,data = polls_2008)
View(polls_2008)
qplot(day,margin,data = polls_2008)
span <- 7
fit <- with(polls_2008,
ksmooth(day, margin, x.points = day, kernel="box", bandwidth = span))
polls_2008 %>% mutate(smooth = fit$y) %>%
ggplot(aes(day, margin)) +
geom_point(size = 3, alpha = .5, color = "grey") +
geom_line(aes(day, smooth), color="red")
source('~/DS-rep/Smoothing.R', echo=TRUE)
total_days <- diff(range(polls_2008$day))
span <- 21/total_days
fit <- loess(margin ~ day, degree=1, span = span, data=polls_2008)
polls_2008 %>% mutate(smooth = fit$fitted) %>%
ggplot(aes(day, margin)) +
geom_point(size = 3, alpha = .5, color = "grey") +
geom_line(aes(day, smooth), color="red")
span <- 7
fit <- with(polls_2008,
ksmooth(day, margin, x.points = day, kernel="normal", bandwidth = span))
polls_2008 %>% mutate(smooth = fit$y) %>%
ggplot(aes(day, margin)) +
geom_point(size = 3, alpha = .5, color = "grey") +
geom_line(aes(day, smooth), color="red")
library(tidyverse)
library(purrr)
library(pdftools)
fn <- system.file("extdata", "RD-Mortality-Report_2015-18-180531.pdf", package="dslabs")
dat <- map_df(str_split(pdf_text(fn), "\n"), function(s){
s <- str_trim(s)
header_index <- str_which(s, "2015")[1]
tmp <- str_split(s[header_index], "\\s+", simplify = TRUE)
month <- tmp[1]
header <- tmp[-1]
tail_index  <- str_which(s, "Total")
n <- str_count(s, "\\d+")
out <- c(1:header_index, which(n==1), which(n>=28), tail_index:length(s))
s[-out] %>%
str_remove_all("[^\\d\\s]") %>%
str_trim() %>%
str_split_fixed("\\s+", n = 6) %>%
.[,1:5] %>%
as_data_frame() %>%
setNames(c("day", header)) %>%
mutate(month = month,
day = as.numeric(day)) %>%
gather(year, deaths, -c(day, month)) %>%
mutate(deaths = as.numeric(deaths))
}) %>%
mutate(month = recode(month, "JAN" = 1, "FEB" = 2, "MAR" = 3, "APR" = 4, "MAY" = 5, "JUN" = 6,
"JUL" = 7, "AGO" = 8, "SEP" = 9, "OCT" = 10, "NOV" = 11, "DEC" = 12)) %>%
mutate(date = make_date(year, month, day)) %>%
filter(date <= "2018-05-01")
library(pdftools)
install.packages("pdftools")
install.packages("pdftools")
library(pdftools)
fn <- system.file("extdata", "RD-Mortality-Report_2015-18-180531.pdf", package="dslabs")
dat <- map_df(str_split(pdf_text(fn), "\n"), function(s){
s <- str_trim(s)
header_index <- str_which(s, "2015")[1]
tmp <- str_split(s[header_index], "\\s+", simplify = TRUE)
month <- tmp[1]
header <- tmp[-1]
tail_index  <- str_which(s, "Total")
n <- str_count(s, "\\d+")
out <- c(1:header_index, which(n==1), which(n>=28), tail_index:length(s))
s[-out] %>%
str_remove_all("[^\\d\\s]") %>%
str_trim() %>%
str_split_fixed("\\s+", n = 6) %>%
.[,1:5] %>%
as_data_frame() %>%
setNames(c("day", header)) %>%
mutate(month = month,
day = as.numeric(day)) %>%
gather(year, deaths, -c(day, month)) %>%
mutate(deaths = as.numeric(deaths))
}) %>%
mutate(month = recode(month, "JAN" = 1, "FEB" = 2, "MAR" = 3, "APR" = 4, "MAY" = 5, "JUN" = 6,
"JUL" = 7, "AGO" = 8, "SEP" = 9, "OCT" = 10, "NOV" = 11, "DEC" = 12)) %>%
mutate(date = make_date(year, month, day)) %>%
filter(date <= "2018-05-01")
View(dat)
View(fit)
View(dat)
View(polls_2008)
------------------------------------------
total_days <- diff(range(dat$date))
------------------------------------------
total_days <- diff(range(dat$date))
#------------------------------------------
total_days <- diff(range(dat$date))
#------------------------------------------
total_days <- diff(range(dat$date))
#---------------------Loess--------------------
total_days <- diff(range(polls_2008$day))
View(polls_2008)
#------------------------------------------
total_days <- 1205#diff(range(dat$date))
span <- 60/total_days
fit <- loess(deaths ~ day, degree=1, span = span, data=dat)
fit <- loess(deaths ~ date, degree=1, span = span, data=dat)
#------------------------------------------
total_days <- diff(range(dat$date))
#------------------------------------------
x <- range(dat$date)
diff(x)
as.number(diff(x))
difftime(x)
difftime(dat$date)
x
x[1]
difftime(x[1],x[2])
difftime(x[2],x[1])
x[2] - x[1]
tot <- x[2] - x[1]
tot <- as.numerci(x[2] - x[1])
tot <- aas.numeric(x[2] - x[1])
tot <- as.numeric(x[2] - x[1])
#------------------------------------------
total_days <- as.numeric(diff(range(dat$date)))
span <- 60/total_days
fit <- loess(deaths ~ date, degree=1, span = span, data=dat)
fit <- loess(dat$deaths ~ dat$date, degree=1, span = span, data=dat)
View(dat)
#------------------------------------------
dat <- filter(!is.na(dat$deaths))
fn <- system.file("extdata", "RD-Mortality-Report_2015-18-180531.pdf", package="dslabs")
dat <- map_df(str_split(pdf_text(fn), "\n"), function(s){
s <- str_trim(s)
header_index <- str_which(s, "2015")[1]
tmp <- str_split(s[header_index], "\\s+", simplify = TRUE)
month <- tmp[1]
header <- tmp[-1]
tail_index  <- str_which(s, "Total")
n <- str_count(s, "\\d+")
out <- c(1:header_index, which(n==1), which(n>=28), tail_index:length(s))
s[-out] %>%
str_remove_all("[^\\d\\s]") %>%
str_trim() %>%
str_split_fixed("\\s+", n = 6) %>%
.[,1:5] %>%
as_data_frame() %>%
setNames(c("day", header)) %>%
mutate(month = month,
day = as.numeric(day)) %>%
gather(year, deaths, -c(day, month)) %>%
mutate(deaths = as.numeric(deaths))
}) %>%
mutate(month = recode(month, "JAN" = 1, "FEB" = 2, "MAR" = 3, "APR" = 4, "MAY" = 5, "JUN" = 6,
"JUL" = 7, "AGO" = 8, "SEP" = 9, "OCT" = 10, "NOV" = 11, "DEC" = 12)) %>%
mutate(date = make_date(year, month, day)) %>%
filter(date <= "2018-05-01" & !is.na(deaths))
View(dat)
#------------------------------------------
dat <- filter(!is.na(dat$deaths))
#------------------------------------------
total_days <- as.numeric(diff(range(dat$date)))
span <- 60/total_days
fit <- loess(dat$deaths ~ dat$date, degree=1, span = span, data=dat)
fit <- loess(dat$deaths ~ as.numeric(dat$date), degree=1, span = span, data=dat)
polls_2008 %>% mutate(smooth = fit$fitted) %>%
ggplot(aes(day, margin)) +
geom_point(size = 3, alpha = .5, color = "grey") +
geom_line(aes(day, smooth), color="red")
fit <- loess(dat$deaths ~ as.numeric(dat$date), degree=1, span = span, data=dat)
polls_2008 %>% mutate(smooth = fit$fitted) %>%
ggplot(aes(date, deaths)) +
geom_point(size = 3, alpha = .5, color = "grey") +
geom_line(aes(date, deaths), color="red")
View(fit)
dat %>% mutate(smooth = fit$fitted) %>%
ggplot(aes(date, deaths)) +
geom_point(size = 3, alpha = .5, color = "grey") +
geom_line(aes(date, deaths), color="red")
library(tidyverse)
library(purrr)
library(pdftools)
fn <- system.file("extdata", "RD-Mortality-Report_2015-18-180531.pdf", package="dslabs")
dat <- map_df(str_split(pdf_text(fn), "\n"), function(s){
s <- str_trim(s)
header_index <- str_which(s, "2015")[1]
tmp <- str_split(s[header_index], "\\s+", simplify = TRUE)
month <- tmp[1]
header <- tmp[-1]
tail_index  <- str_which(s, "Total")
n <- str_count(s, "\\d+")
out <- c(1:header_index, which(n==1), which(n>=28), tail_index:length(s))
s[-out] %>%
str_remove_all("[^\\d\\s]") %>%
str_trim() %>%
str_split_fixed("\\s+", n = 6) %>%
.[,1:5] %>%
as_data_frame() %>%
setNames(c("day", header)) %>%
mutate(month = month,
day = as.numeric(day)) %>%
gather(year, deaths, -c(day, month)) %>%
mutate(deaths = as.numeric(deaths))
}) %>%
mutate(month = recode(month, "JAN" = 1, "FEB" = 2, "MAR" = 3, "APR" = 4, "MAY" = 5, "JUN" = 6,
"JUL" = 7, "AGO" = 8, "SEP" = 9, "OCT" = 10, "NOV" = 11, "DEC" = 12)) %>%
mutate(date = make_date(year, month, day)) %>%
filter(date <= "2018-05-01" & !is.na(deaths))
#------------------------------------------
total_days <- as.numeric(diff(range(dat$date)))
span <- 60/total_days
fit <- loess(dat$deaths ~ as.numeric(dat$date), degree=1, span = span, data=dat)
dat %>% mutate(smooth = fit$fitted) %>%
ggplot(aes(date, deaths)) +
geom_point(size = 3, alpha = .5, color = "grey") +
geom_line(aes(date, deaths), color="red")
dat %>% mutate(smooth = fit$fitted) %>%
ggplot(aes(date, deaths)) +
geom_point(size = 3, alpha = .5, color = "black") +
geom_line(aes(date, deaths), color="red")
dat %>% mutate(smooth = fit$fitted) %>%
ggplot(aes(date, deaths)) +
geom_point(size = 3, alpha = .5, color = "black")
dat %>% mutate(smooth = fit$fitted) %>%
ggplot(aes(date, deaths)) +
geom_point(size = 3, alpha = .5, color = "black") +
geom_line(aes(date, deaths), color="red")
#------------------------------------------
total_days <- as.numeric(diff(range(dat$date)))
span <- 60/total_days
fit <- loess(dat$deaths ~ as.numeric(dat$date), degree=1, span = span, data=dat)
dat %>% mutate(smooth = fit$fitted) %>%
ggplot(aes(date, deaths)) +
geom_point(size = 3, alpha = .5, color = "black") +
geom_line(aes(date, deaths), color="red")
dat %>% mutate(smooth = fit$fitted) %>%
ggplot(aes(as.numeric(date), deaths)) +
geom_point(size = 3, alpha = .5, color = "black") +
geom_line(aes(as.numeric(date), deaths), color="red")
#------------------------------------------
dat <- dat(complete.cases(dat),)
total_days <- as.numeric(diff(range(dat$date)))
span <- 60/total_days
fit <- loess(dat$deaths ~ as.numeric(dat$date), degree=1, span = span, data=dat)
dat %>% mutate(smooth = fit$fitted) %>%
ggplot(aes(date, deaths)) +
geom_point(size = 3, alpha = .5, color = "black") +
geom_line(aes(date, deaths), color="red")
dat %>% mutate(smooth = fit$fitted) %>%
ggplot(aes(date, deaths)) +
geom_point(size = 3, alpha = .5, color = "black") +
geom_line(aes(date, smooth), color="red")
dat %>% mutate(smooth = fit$fitted) %>%
ggplot(aes(date, deaths)) +
geom_point(size = 3, alpha = .5, color = "black") +
geom_line(aes(date, smooth), color="red",size=2)
dat %>%
mutate(smooth = predict(fit), day = yday(date), year = as.character(year(date))) %>%
ggplot(aes(day, smooth, col = year)) +
geom_line(lwd = 2)
dat %>%
mutate(smooth = predict(fit, as.numeric(date)), day = mday(date), year = as.character(year(date))) %>%
ggplot(aes(day, smooth, col = year)) +
geom_line(lwd = 2)
dat %>%
mutate(smooth = predict(fit, as.numeric(date)), day = yday(date), year = as.character(year(date))) %>%
ggplot(aes(day, smooth, col = year)) +
geom_line(lwd = 2)
source('~/DS-rep/Matrix.R', echo=TRUE)
class(mnist$train$images)
View(mnist)
x <- mnist$train$images[1:1000,]
y <- mnist$train$labels[1:1000]
View(x)
grid <- matrix(x[3,], 28, 28)
View(grid)
image(1:28, 1:28, grid)
image(1:28, 1:28, grid[, 28:1])
#---------------------------------------
sums <- rowSums(x)
avg <- rowMeans(x)
data_frame(labels = as.factor(y), row_averages = avg) %>%
qplot(labels, row_averages, data = ., geom = "boxplot")
install.packages("matrixStats")
source('~/DS-rep/Matrix_excercis.R', echo=TRUE)
dim(x)
dim(x)[1]
View(x)
View(x)
rowSums(x)
colSums(x)
col1 <- colSums(x)
col2 <- sweep(x, 2, 1:nrow(x),"+")
View(col2)
col2 <- sweep(x, 1, 1:nrow(x),"+")
View(col2)
col2 <- sweep(x, 2, 1:ncol(x),"+")
View(col2)
col3 <- x + seq(nrow(x))
View(col3)
#---------------------------------------
sums <- rowSums(x)
avg <- rowMeans(x)
data_frame(labels = as.factor(y), row_averages = avg) %>%
qplot(labels, row_averages, data = ., geom = "boxplot")
library(dslabs)
library(matrixStats)
if(!exists("mnist")) mnist <- read_mnist()
class(mnist$train$images)
x <- mnist$train$images[1:1000,]
y <- mnist$train$labels[1:1000]
grid <- matrix(x[3,], 28, 28)
image(1:28, 1:28, grid)
image(1:28, 1:28, grid[, 28:1])
#---------------------------------------
sums <- rowSums(x)
avg <- rowMeans(x)
data_frame(labels = as.factor(y), row_averages = avg) %>%
qplot(labels, row_averages, data = ., geom = "boxplot")
#---------------------------------------
new_x <- (x_f > 50 & x_f < 205)*1
#---------------------------------------
new_x <- (x > 50 & x < 205)*1
View(new_x)
#---------------------------------------
new_x <- x[x<50 | x>205] <- 0
new_x <- x[x>=50 & x<=205] <- 1
sums <- rowSums(new_x)
class(new_x)
#---------------------------------------
new_x <- x(x<50 | x>205) <- 0
#---------------------------------------
new_x <- x(x<50 | x>205) <- 0
[
#---------------------------------------
new_x <- x[x<50 | x>205] <- 0
y <- rowMeans(mnist$train$images>50 & mnist$train$images<205)
qplot(as.factor(mnist$train$labels), y, geom = "boxplot")
if(!require(tidyverse)) install.packages("tidyverse", repos = "http://cran.us.r-project.org")
if(!require(caret)) install.packages("caret", repos = "http://cran.us.r-project.org")
dl <- tempfile()
#download.file("http://files.grouplens.org/datasets/movielens/ml-10m.zip", dl)
dl <- "/home/soroush/ml-10m.zip"
ratings <- read.table(text = gsub("::", "\t", readLines(unzip(dl, "ml-10M100K/ratings.dat"))),
col.names = c("userId", "movieId", "rating", "timestamp"))
movies <- str_split_fixed(readLines(unzip(dl, "ml-10M100K/movies.dat")), "\\::", 3)
colnames(movies) <- c("movieId", "title", "genres")
movies <- as.data.frame(movies) %>% mutate(movieId = as.numeric(levels(movieId))[movieId],
title = as.character(title),
genres = as.character(genres))
movielens <- left_join(ratings, movies, by = "movieId")
set.seed(1)
test_index <- createDataPartition(y = movielens$rating, times = 1, p = 0.1, list = FALSE)
edx <- movielens[-test_index,]
temp <- movielens[test_index,]
validation <- temp %>%
semi_join(edx, by = "movieId") %>%
semi_join(edx, by = "userId")
removed <- anti_join(temp, validation)
edx <- rbind(edx, removed)
rm(dl, ratings, movies, test_index, temp, movielens, removed)
View(edx)
count(edx$rating==0)
count(edx$rating=0)
count(edx$rating==0)
count(edx)
count(edx$userId)
count(edx$movieId)
count(edx$timestamp)
count(edx$rating)
count(edx$rating==0)
View(edx)
count(edx$rating==3)
count(edx$movieId)
library(dyplyr)
library(dplyr)
edx %>% group_by(movieId) %>% summarize(count=n())
table(edx$movieId)
edx %>% group_by(tittle) %>% summarize(count=n())
edx %>% group_by(title) %>% summarize(count=n())
summary(edx)
count(distinct(edx$movieId))
count(distinct(edx$title))
table(edx$movieId)
summary(table(edx$movieId))
count(edx$movieId)
count(edx$title)
edx %>% group_by(moveId)%>% summarize()
edx %>% group_by(movieId)%>% summarize()
edx %>% group_by(movieId)%>% summarize(count())
edx %>% group_by(movieId)%>% summarize(count=n())
x <- edx %>% group_by(movieId)%>% summarize(count=n())
summary(x)
sum(x$count)
count(x$movieId)
table(x$movieId)
x <- edx %>% group_by(userId)%>% summarize(count=n())
x <- edx %>% group_by(genres)%>% summarize(count=n())
View(x)
y <- filter(grep("Action"),x)
y <- filter(grep("Action"),x=x)
y <- filter(grep("Action",x))
y <- filter(grep("Action",x$genres))
y <- filter(grepl("Action",x$genres))
y <- x %>% filter(grepl("Action",genres))
View(y)
y <- x %>% filter(grepl("Drama",genres))
y1 <- x %>% filter(grepl("Comedy",genres))
y2 <- x %>% filter(grepl("Thriller",genres))
y3 <- x %>% filter(grepl("Romance",genres))
sum(y$count)
sum(y1$count)
sum(y2$count)
sum(y3$count)
x <- edx %>% group_by(title)%>% summarize(count=n())
View(x)
x <- edx %>% group_by(rating)%>% summarize(count=n())
View(x)
x <- x %>% mutate(rem=div(rating,round()))
x <- x %>% mutate(rem=div(rating,round(rating)))
x <- x %>% mutate(rem=is.decimal(rating))
x <- x %>% mutate(rem=rating%%1)
View(x)
x %>% filter(rem == 0) %>% select(count) %>% sum()
x %>% filter(rem == 0.5) %>% select(count) %>% sum()
View(edx)
savehistory("~/DS-rep/history.Rhistory")
